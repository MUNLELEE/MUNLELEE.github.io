<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刷题 on 墨纹</title>
    <link>https://MUNLELEE.github.io/categories/%E5%88%B7%E9%A2%98/</link>
    <description>Recent content in 刷题 on 墨纹</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 10 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://MUNLELEE.github.io/categories/%E5%88%B7%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>leetcode 复杂链表的复制</title>
      <link>https://MUNLELEE.github.io/post/leetcode-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://MUNLELEE.github.io/post/leetcode-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</guid>
      <description>题目描述 请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。
示例  
输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]解题 题目的意思很简单，就是返回一个一模一样的链表头结点。由于随机指针的存在，链表的复制不能够像正常链表那样直接遍历，也因此没想明白要怎么做，最后翻了题解，才发现又是我最烦的递归。
这道题采用的递归解法其实本质就是遇到问题再解决问题，在还没有开始复制之前，所有的复制结点都是虚无的，要让这些结点和已知的结点一一对应起来就需要一个map数据结构。用来对应新旧两个链表的结点。这样从第一个结点入手，当这个结点不在map中时，就立刻创建这个结点并于原链表中的相应结点建立对应关系。之后的每一个结点都可以根据这样的逻辑进行创建，而因为有map这个数据结构的存在，这样每个结点都不是虚空存在的，而是可以在map中找到与之对应的结点。可以解决随机结点创建的问题。具体代码如下：
class Solution { public: unordered_map&amp;lt;Node*, Node*&amp;gt; um; // 用来存储两个链表，结点之间一一对应  Node* copyRandomList(Node* head) { if (head == NULL) { // 如果链表本就为空，那么直接返回空  return NULL; } // 遵循边遍历边创建的原则  if (!um.count(head)) { // 如果此时哈希表中没有这个结点，就直接创建  Node* headNew = new Node(head-&amp;gt;val); // 初始化一个相同的结点  um.insert(make_pair(head, headNew)); // 将这两个位置一样的结点对应起来  headNew-&amp;gt;next = copyRandomList(head-&amp;gt;next); // 同理下一个结点也应该这样拷贝，依旧遵循上面的原则  headNew-&amp;gt;random = copyRandomList(head-&amp;gt;random); } // 如果这个结点已经在哈希表中存在，那么就直接返回  return um[head]; } }; </description>
    </item>
    
    <item>
      <title>leetcode 141 环形链表</title>
      <link>https://MUNLELEE.github.io/post/leetcode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://MUNLELEE.github.io/post/leetcode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 给定一个链表，判断链表中是否有环。
如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。
如果链表中存在环，则返回 true 。 否则，返回 false 。
示例  在这里插入图片描述 
输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。 在这里插入图片描述 
输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。 在这里插入图片描述 
输入：head = [1], pos = -1输出：false解释：链表中没有环。提示 链表中节点的数目范围是 [0, 104]-105 &amp;lt;= Node.val &amp;lt;= 105pos 为 -1 或者链表中的一个 有效索引 。解题想法 这道题在leetcode上属于简单题，但由于第一次遇见这种解法（也由于第一次想错了，根本不是正解）所以就想记录一下。 很明显题目要判断链表中是否有环，于是可以想到如果在链表中有两个指针分别向前跑，当两个指针指向的结点相同的时候便证明链表中有环存在。这个时候就需要一个循环来判断两个指针是否相等。此时条件应该是first !</description>
    </item>
    
    <item>
      <title>leetcode 862 和至少为K的最短子数组</title>
      <link>https://MUNLELEE.github.io/post/leetcode-862-%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BAk%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://MUNLELEE.github.io/post/leetcode-862-%E5%92%8C%E8%87%B3%E5%B0%91%E4%B8%BAk%E7%9A%84%E6%9C%80%E7%9F%AD%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description>题目描述 返回 A 的最短的非空连续子数组的长度，该子数组的和至少为 K 。
如果没有和至少为 K 的非空子数组，返回 -1
示例 输入：A = [1], K = 1输出：1输入：A = [1,2], K = 4输出：-1输入：A = [2,-1,2], K = 3输出：3提示 1. 1 &amp;lt;= A.length &amp;lt;= 500002. -10 ^ 5 &amp;lt;= A[i] &amp;lt;= 10 ^ 53. 1 &amp;lt;= K &amp;lt;= 10 ^ 9首先对于我这样一个不怎么有基础的人来说，这道题着实是令我作呕。。解题也是通过了其它题解的启发。下面就开始吧。
解题想法 由于题目中已经明确表示了数组的长度为50000，因此如果要使用暴力接法，势必造成O(n^2)的时间复杂度。因此就要想办法让i， j两个循环变量只跑一遍。而对于这道题因为绕不开要求取数组中的区间和。所以可以采用的一个方法是前缀和思想。大致的意思就是sum[i] = array[0] + array[1] + &amp;hellip; + array[i - 1]利用这个前缀和数组就可以较为方便的得到一个数组的区间和，例如要知道区间[1, 3]的和，我们可以利用前缀和数组得到sum[4] - sum[1]（这里需要注意的是，为了便于计算前缀和数组的第零个元素默认为零）</description>
    </item>
    
  </channel>
</rss>
