<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>春招 on 墨纹</title>
    <link>https://MUNLELEE.github.io/tags/%E6%98%A5%E6%8B%9B/</link>
    <description>Recent content in 春招 on 墨纹</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 02 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://MUNLELEE.github.io/tags/%E6%98%A5%E6%8B%9B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>春招 | 知识点留档</title>
      <link>https://MUNLELEE.github.io/post/%E6%98%A5%E6%8B%9B-%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://MUNLELEE.github.io/post/%E6%98%A5%E6%8B%9B-%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>春节已然过去了，处于人生的又一个十字路口且充满后顾之忧的我决定开始准备春招，时间看着是比较紧的，我也不知道自己最后能够准备到什么程度。
1、重载、隐藏、重写（覆盖）三者的区别 重载：是指同一可访问区内被声明的几个具有不同参数列*（参数的类型、个数、顺序不同）的同名函数，根据参数列表确定调用哪个函数。
隐藏：指的是派生类类型的对象、指针引用访问基类和派生类都有的同名函数时**（只要求同名，不管参数列表是否相同）**，访问的是派生类的函数，即隐藏了基类的同名函数。
重写（覆盖）：是指派生类中存在重新定义的函数。其函数名，参数列表，返回值类型，所有都必须同基类中被重写的函数一致。只有函数体不同（花括号内），派生类调用时会调用派生类的重写函数，不会调用被重写函数。重写的基类中被重写的函数必须有virtual修饰。
此外，重载的参数不同，函数体不同；隐藏的参数可以不同，函数体不同；重写或覆盖仅仅函数体不同。
三者更为深入的一些问题 1.1 重载为什么改变参数就可以实现调用不同函数？ 因为C++在编译的时候会对函数进行重命名，保证函数命名的唯一性，而函数的参数列表不同便会导致函数被命名为不同的函数。
1.2 构造函数可以被重载吗？析构函数呢？ 构造函数可以被重载，因为可以存在有参和无参的构造函数；析构函数不能被重载，因为析构函数只能有一个并且不带参数。
2、new和malloc的区别 据说是C++的经典问题，在综合了网络上的一些博文后，得出以下几点不同。
（1）、申请内存所在区域。new操作符从自由存储区*（不仅可以是堆还可以是静态存储区）*上为对象动态分配内存，而malloc从堆上分配内存，这块区域是操作系统维护的一块特殊内存，用于程序动态分配。
（2）、返回类型。new操作符返回的是对象类型指针，不需要进行强制转换；malloc内存分配成功则是返回void*，需要通过强制类型转换成指定类型。
（3）、内存分配失败时的返回值。new内存分配失败时，会抛出bad_alloc异常，不会返回NULL，malloc分配内存失败时返回NULL
（4）、**是否需要指定内存大小。**使用new操作符时进行内存分配时无需指定内存块的大小，使用malloc需要显式的指定内存的大小。
class A {...} A *ptr = new A; A *ptr = (A*)malloc(sizeof(A)); （5）、**是否调用构造函数。**使用new操作符分配对象内存时经历如下的几个步骤：
· 调用operator new函数（数组是operator new[]）来分配内存空间
· 编译器运行相应的构造函数创建对象，并赋初值
· 返回指向这个对象的指针
使用delete操作符释放内存空间时会经历如下步骤：
· 调用对象的析构函数
· 编译器调用operator delete（operator delete[]）释放内存空间
使用malloc分配内存则不会调用构造函数
（6）、**对数组的处理。**C++提供了new []和delete []来专门处理数组类型，而malloc需要自己指定数组的大小
int *ptr = (int*)malloc(sizeof(int) * 10) // 分配一个十个int大小的数组 （7）、**是否能够重新分配内存。**使用malloc分配内存后，如果在使用过程中发现内存不足，可以使用realloc函数进行内存的重新分配内存（先判断当前指针所指内存是否有足够的的连续空间，如果有，原地扩大可分配的地址，并且返回原来的指针；如果空间不够，先按照指定大小分配空间，将原有数据从头到尾拷贝到新分配的内存区域，而后释放原来的内存）。new没有扩充内存的配套操作
（8）、客户处理内存分配不足。new会有异常机制，而malloc只能返回NULL
3、虚函数 虚函数一般在继承下发挥作用，基类声明一个虚函数，子类重载这一函数，这样当使用基类指针指向子类，并希望调用这个函数时，得到的就是子类重载过的函数。（在多态中还会有关于虚函数的讲解），通过使用虚函数来完成运行时决议，与传统的编译时决定有本质区别。
虚函数的实现是由两个部分组成的，虚函数指针和虚函数表。
当使用类的指针调用成员函数时，普通函数由指针类型决定，而虚函数由指针指向的实际类型决定。
3.1、虚函数指针 本质上就是一个指向函数的指针，指向用户定义的虚函数。在一个被实例化的对象中，它总是被存放在该对象的地址首位。只有拥有虚函数的类才会拥有虚函数指针，只有拥有虚函数的类才会拥有虚函数指针，每个虚函数也都会对应一个虚函数指针。
3.2、A、B两个类，类中有虚函数。C继承AB，有几张虚函数表？ 两张，多继承就会有多个虚函数表，因为每个父类的虚函数是不同的，指针也是不同的。如果公用一张虚函数表，就分不清子类到底实例化的哪个基类函数。
3.3、虚构函数可以是虚函数吗？ 析构函数必须是虚函数。因为如果不是虚函数，当在主函数中用父类的指针new出一个子类对象，最后析构的时候，只会调用父类析构函数而不会调用子类析构函数。而且如果不为虚函数，父类指针就不会调用子类成员函数。</description>
    </item>
    
  </channel>
</rss>
